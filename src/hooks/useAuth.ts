import { useState, useEffect } from 'react';
import { jwtDecode } from 'jwt-decode';
import { User } from '@/types';

interface DecodedToken {
  userId: string;
  email: string;
  role: 'Administrator' | 'Developer' | 'User';
  username: string;
  iat: number;
  exp: number;
}

export function useAuth() {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const token = localStorage.getItem('token');
    console.log('üîê useAuth: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage:', !!token);
    
    if (token) {
      try {
        const decodedToken = jwtDecode<DecodedToken>(token);
        console.log('üîì useAuth: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', decodedToken);
        
        if (decodedToken.exp * 1000 > Date.now()) {
          const userData = {
            id: decodedToken.userId,
            email: decodedToken.email,
            role: decodedToken.role,
            username: decodedToken.username,
          };
          console.log('‚úÖ useAuth: –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
          setUser(userData);
        } else {
          console.log('‚è∞ useAuth: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º');
          localStorage.removeItem('token');
          setUser(null);
        }
      } catch (error) {
        console.error("‚ùå useAuth: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
        localStorage.removeItem('token');
        setUser(null);
      }
    } else {
      console.log('üëª useAuth: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      setUser(null);
    }
  }, []);

  const logout = () => {
    localStorage.removeItem('token');
    setUser(null);
    window.location.href = '/auth';
  };

  return { user, logout };
}
