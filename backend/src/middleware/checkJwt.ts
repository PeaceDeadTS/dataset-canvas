import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import logger from '../logger';

export const checkJwt = (req: Request, res: Response, next: NextFunction) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    logger.warn('No token provided');
    return res.status(401).send('Unauthorized: No token provided');
  }

  let jwtPayload;
  try {
    jwtPayload = <any>jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');
    
    // –í–∞–∂–Ω–µ–π—à–µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ req.user
    const { userId, username, email, role } = jwtPayload;
    req.user = { userId, username, email, role };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    const newToken = jwt.sign({ userId, username, email, role }, process.env.JWT_SECRET || 'your_jwt_secret', {
      expiresIn: '1h',
    });
    res.setHeader('token', newToken);

  } catch (error) {
    logger.error('JWT Error', { error });
    return res.status(401).send('Unauthorized: Invalid token');
  }

  next();
};

export const checkJwtOptional = (req: Request, res: Response, next: NextFunction) => {
    const token = <string>req.headers['authorization']?.split(' ')[1];
    if (!token) {
        logger.info('üîç checkJwtOptional: –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        return next();
    }

    let jwtPayload;
    try {
        jwtPayload = <any>jwt.verify(token, process.env.JWT_SECRET || 'your_jwt_secret');
        res.locals.jwtPayload = jwtPayload;

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º req.user –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const { userId, username, email, role } = jwtPayload;
        req.user = { userId, username, email, role };
        
        logger.info('üîç checkJwtOptional: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω', { 
            userId, 
            username, 
            role 
        });

        const newToken = jwt.sign({ userId, username, email, role }, process.env.JWT_SECRET || 'your_jwt_secret', {
            expiresIn: '1h',
        });
        res.setHeader('token', newToken);
    } catch (error) {
        logger.warn('üîç checkJwtOptional: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –∞–Ω–æ–Ω–∏–º–Ω—ã–π', { error: error.message });
        // If token is invalid, just proceed without user info
    }

    next();
};
